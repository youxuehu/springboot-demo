<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">


    <bean id="userService" class="org.example.beans.UserServiceImpl" init-method="init" destroy-method="destroy" scope="prototype">
            <property name="userDAO" ref="userDAO"/>
    </bean>
    <bean id="userDAO" class="org.example.beans.dao.UserDAOImpl"  init-method="init" destroy-method="destroy" scope="prototype">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="transactionUtil" ref="transactionUtil"/>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionUtil" class="org.example.beans.utils.TransactionUtil">
           <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- 编织： weave -->
    <aop:config proxy-target-class="true">
        <!-- 切入点： 追加额外功能的目标方法
                     指定目标中哪些方法需要额外功能
             表达式        expression(访问修饰符 返回值 包.类.方法名(参数表))
         -->
        <aop:pointcut id="pc" expression="execution (* org.example.beans.*.*(..))"/>
        <!--
            组装
        -->
        <aop:advisor advice-ref="methodBeforeHandlerAOP" pointcut-ref="pc"/>
    </aop:config>

    <bean id="methodBeforeHandlerAOP" class="org.example.aop.MethodBeforeHandlerAOP"/>
    <bean id="afterReturnningAdviceAOP" class="org.example.aop.AfterReturnningAdviceAOP"/>
    <bean id="methodInterceptorAOP" class="org.example.aop.MethodInterceptorAOP"
          abstract="false" lazy-init="false" autowire="default"/>

    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">

        <property name="beanNames">
            <list>
                <value>userService</value>
            </list>
        </property>

        <property name="interceptorNames">
            <list>
                <value>methodInterceptorAOP</value>
            </list>
        </property>
    </bean>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:component-scan base-package="org.example.**"/>



    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
    </bean>


    <bean id="commomEventBus" class="org.example.google.guave.event.CommomEventBus" init-method="init"/>
    <bean id="eventBusRegister" class="org.example.google.guave.event.EventBusRegister" init-method="init">
            <property name="commomEventBus" ref="commomEventBus"/>
    </bean>
    <bean id="publishEventBus" class="org.example.google.guave.event.PublishEventBus" init-method="init">
        <property name="commomEventBus" ref="commomEventBus"/>
    </bean>

</beans>